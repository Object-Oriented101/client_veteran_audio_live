[{"message": "Testing"}, {"message": "So now if I say something like non-English characters..."}, {"message": "Alright, this is perfect. I think this works. And we should be good here."}, {"message": ""}, {"message": "Hey. Actually working pretty well."}, {"message": "Just Blank"}, {"message": ""}, {"message": ""}, {"message": ""}, {"message": "Now when you are free"}, {"message": ""}, {"message": ""}, {"message": ""}, {"message": ""}, {"message": ""}, {"message": "Okay."}, {"message": "And then another one, Python display. No, actually it's streamlet run display."}, {"message": "Okay."}, {"message": "Oh nice, okay."}, {"message": "So, yeah, so I guess it does. I was... Yeah. Um..."}, {"message": "Yeah, so I was a little worried because Google meets taking over the mic right now, but yeah, it looks like it's just does it live"}, {"message": "I'm right now just for the inference sake. It's I'm just using like a, I think it's like a base English, right? But obviously we can scale this up to large and no problem. Like it's just literally a little model change, but yeah, I guess you're probably interested in how this works. So I am on the server side. It's pretty simple, right? I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library. I'm just using the WebSocket library."}, {"message": "Just different callbacks, right? On message, receive the transcription. In my case, I'm going to be saving the message to the JSON file just for the sake of, um, just like to display it on, right? Obviously there's better ways, but just for POC. I did that. Error is just error. Print is just friends. Um, this code right here, so if like it detects that there's sound, then it kind of sends it over. So, um,"}, {"message": "Yeah, I mean once the socket's open it just kind of sends it over once it gets it goes to the on message kind of thing and Then on the server side, which is also here. It's just super basic right get the data convert it to bytes and then transcribe it Using the this is an important part like using the GPU and then send it back. That's other So I don't know why this took me so long to be honest with you like this library was like a little finicky And it seems like you already knew about it like so I didn't know about this But whisper was not really meant for live transcription So when I first started I was just kind of building it from scratch like getting like a temporary like file and just like There's something on Python called like temp file or like something like that So it just makes 10 files of like every five 10 seconds and doesn't and I'm streaming and backing for it was working But the problem was I don't know if you ran into it is that it wasn't like lining up the output like first five seconds and like the next five seconds of two seconds in between these two kind of like There was a little bit of mix up like there was overlap So the next one was do I want to solve that and I was like no there's got to be a better way so then It's just like there were a couple github libraries. It kind of based it off of that and this is"}, {"message": "Thanks for watching!"}, {"message": "Exactly."}, {"message": "Yeah."}, {"message": "So that I was thinking about that from a transcription point of view as well, right? And I did a project I told you about my semi-conductor project of identifying the juror ticket start we talked about that like the customer and this so this I mean that thing I didn't even have like the break points away so this thing I feel like"}, {"message": "This library honestly just took care of it for me. But yeah."}, {"message": ""}, {"message": "Right. Yeah, so."}, {"message": "Exactly, it's taking care of it. I'm not manually checking whether it's like this much and then take a pause. This library is literally just, because if you look at the pauses, right? If you look at this, it only stops when I stop talking and it sends the data over. If I just keep talking like how I am right now, it's not going to..."}, {"message": "Right, exactly. So when I say it's not going to, that's when it stops. So..."}, {"message": "Yeah."}, {"message": "You did. You did. I did see it. Yeah."}, {"message": "Thanks for watching!"}, {"message": ""}, {"message": ""}, {"message": ""}, {"message": "Yeah."}, {"message": "Right"}, {"message": "Run."}, {"message": "Right."}, {"message": ""}, {"message": "Right."}, {"message": "Mm-hmm"}, {"message": "I see, so what you're saying is you want like basically like per second, like per word, like alive, like, line by line."}, {"message": "Right."}, {"message": ""}, {"message": ""}, {"message": "Mm-hmm"}, {"message": "Mm-hmm"}, {"message": "Honey,"}, {"message": "Yeah."}]